/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.2
 * source: lib/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export declare class Request extends pb_1.Message {
    #private;
    constructor(data?: any[] | {
        command?: string;
    });
    get command(): string;
    set command(value: string);
    static fromObject(data: {
        command?: string;
    }): Request;
    toObject(): {
        command?: string | undefined;
    };
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request;
    serializeBinary(): Uint8Array;
    static deserializeBinary(bytes: Uint8Array): Request;
}
export declare class Response extends pb_1.Message {
    #private;
    constructor(data?: any[] | {});
    static fromObject(data: {}): Response;
    toObject(): {};
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response;
    serializeBinary(): Uint8Array;
    static deserializeBinary(bytes: Uint8Array): Response;
}
export declare class Error extends pb_1.Message {
    #private;
    constructor(data?: any[] | {
        code?: number;
        message?: string;
    });
    get code(): number;
    set code(value: number);
    get message(): string;
    set message(value: string);
    static fromObject(data: {
        code?: number;
        message?: string;
    }): Error;
    toObject(): {
        code?: number | undefined;
        message?: string | undefined;
    };
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Error;
    serializeBinary(): Uint8Array;
    static deserializeBinary(bytes: Uint8Array): Error;
}
export declare class Address extends pb_1.Message {
    #private;
    constructor(data?: any[] | ({
        twin?: number;
    } & (({
        connection?: string;
    }))));
    get twin(): number;
    set twin(value: number);
    get connection(): string;
    set connection(value: string);
    get has_connection(): boolean;
    get _connection(): "connection" | "none";
    static fromObject(data: {
        twin?: number;
        connection?: string;
    }): Address;
    toObject(): {
        twin?: number | undefined;
        connection?: string | undefined;
    };
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Address;
    serializeBinary(): Uint8Array;
    static deserializeBinary(bytes: Uint8Array): Address;
}
export declare class Envelope extends pb_1.Message {
    #private;
    constructor(data?: any[] | ({
        uid?: string;
        timestamp?: number;
        expiration?: number;
        source?: Address;
        destination?: Address;
    } & (({
        request?: Request;
        response?: never;
        error?: never;
    } | {
        request?: never;
        response?: Response;
        error?: never;
    } | {
        request?: never;
        response?: never;
        error?: Error;
    }) | ({
        plain?: Uint8Array;
        cipher?: never;
    } | {
        plain?: never;
        cipher?: Uint8Array;
    }) | ({
        tags?: string;
    }) | ({
        signature?: Uint8Array;
    }) | ({
        schema?: string;
    }) | ({
        federation?: string;
    }))));
    get uid(): string;
    set uid(value: string);
    get tags(): string;
    set tags(value: string);
    get has_tags(): boolean;
    get timestamp(): number;
    set timestamp(value: number);
    get expiration(): number;
    set expiration(value: number);
    get source(): Address;
    set source(value: Address);
    get has_source(): boolean;
    get destination(): Address;
    set destination(value: Address);
    get has_destination(): boolean;
    get request(): Request;
    set request(value: Request);
    get has_request(): boolean;
    get response(): Response;
    set response(value: Response);
    get has_response(): boolean;
    get error(): Error;
    set error(value: Error);
    get has_error(): boolean;
    get signature(): Uint8Array;
    set signature(value: Uint8Array);
    get has_signature(): boolean;
    get schema(): string;
    set schema(value: string);
    get has_schema(): boolean;
    get federation(): string;
    set federation(value: string);
    get has_federation(): boolean;
    get plain(): Uint8Array;
    set plain(value: Uint8Array);
    get has_plain(): boolean;
    get cipher(): Uint8Array;
    set cipher(value: Uint8Array);
    get has_cipher(): boolean;
    get message(): "none" | "request" | "response" | "error";
    get payload(): "none" | "plain" | "cipher";
    get _tags(): "none" | "tags";
    get _signature(): "none" | "signature";
    get _schema(): "none" | "schema";
    get _federation(): "none" | "federation";
    static fromObject(data: {
        uid?: string;
        tags?: string;
        timestamp?: number;
        expiration?: number;
        source?: ReturnType<typeof Address.prototype.toObject>;
        destination?: ReturnType<typeof Address.prototype.toObject>;
        request?: ReturnType<typeof Request.prototype.toObject>;
        response?: ReturnType<typeof Response.prototype.toObject>;
        error?: ReturnType<typeof Error.prototype.toObject>;
        signature?: Uint8Array;
        schema?: string;
        federation?: string;
        plain?: Uint8Array;
        cipher?: Uint8Array;
    }): Envelope;
    toObject(): {
        uid?: string | undefined;
        tags?: string | undefined;
        timestamp?: number | undefined;
        expiration?: number | undefined;
        source?: {
            twin?: number | undefined;
            connection?: string | undefined;
        } | undefined;
        destination?: {
            twin?: number | undefined;
            connection?: string | undefined;
        } | undefined;
        request?: {
            command?: string | undefined;
        } | undefined;
        response?: {} | undefined;
        error?: {
            code?: number | undefined;
            message?: string | undefined;
        } | undefined;
        signature?: Uint8Array | undefined;
        schema?: string | undefined;
        federation?: string | undefined;
        plain?: Uint8Array | undefined;
        cipher?: Uint8Array | undefined;
    };
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Envelope;
    serializeBinary(): Uint8Array;
    static deserializeBinary(bytes: Uint8Array): Envelope;
}
//# sourceMappingURL=types.d.ts.map